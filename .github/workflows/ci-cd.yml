name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache: ${{ steps.cache-pnpm.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm Store
        id: cache-pnpm
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Verify pnpm Installation
        run: pnpm --version

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [frontend, backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore pnpm Store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm turbo run lint --filter=${{ matrix.package }}

      - name: Test
        run: pnpm turbo run test --filter=${{ matrix.package }}

      - name: Build
        run: pnpm turbo run build --filter=${{ matrix.package }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}-build
          path: apps/${{ matrix.package }}/dist
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: deploy
      cancel-in-progress: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            set -e

            # Update Node.js if necessary
            if ! node -v | grep -q 'v${{ env.NODE_VERSION }}'; then
              echo "Updating Node.js to v${{ env.NODE_VERSION }}..."
              curl -fsSL https://deb.nodesource.com/setup_${{ env.NODE_VERSION }}.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install or update pnpm
            sudo npm install -g pnpm@${{ env.PNPM_VERSION }}

            # Navigate to the app directory
            cd /home/${{ secrets.VM_USER }}/app

            # Copy new files
            scp -r ${{ github.workspace }}/artifacts/* .

            # Install production dependencies
            pnpm install --prod --frozen-lockfile

            # Reload PM2 processes
            pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js

            # Ensure frontend is running
            if ! pm2 list | grep -q 'frontend'; then
              echo "Frontend not running, starting..."
              pm2 start apps/frontend/.next/standalone/server.js --name frontend
            fi

            # Clean up old backups (keep last 5)
            cd backups && ls -t | tail -n +6 | xargs -I {} rm -- {}

      - name: Post Deployment Cleanup
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed. Rolling back..."
            # Add rollback logic here if needed
          fi