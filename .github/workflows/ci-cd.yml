name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache: ${{ steps.cache-pnpm.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm Store
        id: cache-pnpm
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Verify pnpm Installation
        run: pnpm --version

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [frontend, backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore pnpm Store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm turbo run lint --filter=${{ matrix.package }}

      - name: Test
        run: pnpm turbo run test --filter=${{ matrix.package }}

      - name: Build
        run: pnpm turbo run build --filter=${{ matrix.package }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: deploy
      cancel-in-progress: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            set -e

            # Navigate to the app directory named after the repo
            cd /home/${{ secrets.VM_USER }}/app/${{ env.REPO_NAME }}

            # Pull the latest code from the main branch
            git checkout main
            git pull origin main            

            # Install dependencies and build the project
            pnpm install
            pnpm build
            
            # Ensure the target directory exists
            mkdir -p apps/backend/dist/configs
            
            # Copy the .env file from src/configs to dist/configs
            cp apps/backend/src/configs/.env apps/backend/dist/configs/.env
            
            # Append secrets to the copied .env file
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> apps/backend/dist/configs/.env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> apps/backend/dist/configs/.env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> apps/backend/dist/configs/.env
            echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> apps/backend/dist/configs/.env
            echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> apps/backend/dist/configs/.env
            echo "CLOVA_API_KEY=${{ secrets.CLOVA_API_KEY }}" >> apps/backend/dist/configs/.env
            echo "CLOVA_GATEWAY_KEY=${{ secrets.CLOVA_GATEWAY_KEY }}" >> apps/backend/dist/configs/.env
            echo "CLOVA_REQUEST_ID=${{ secrets.CLOVA_REQUEST_ID }}" >> apps/backend/dist/configs/.env
            echo "CLOVA_API_URL=${{ secrets.CLOVA_API_URL }}" >> apps/backend/dist/configs/.env

            # Reload PM2 processes
            pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js

      - name: Post Deployment Cleanup
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed. Rolling back..."
            # Add rollback logic here if needed
          fi
